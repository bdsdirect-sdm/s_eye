// controllers/UserController.ts
import { Request, Response } from 'express';
import UserDetails from '../models/UserDetails';
const bcrypt = require('bcrypt');
var jwt = require('jsonwebtoken');
import dotenv from 'dotenv';
import {httpStatusCodes} from "../../constants"
import { sendWelcomeEmail } from '../mail/nodemailerConfig';
import UserAddresses from '../models/UserAddress';
dotenv.config();

// For testing
export const check = (req: Request, res: Response) => {
    res.send("Hello world")
}

// Getting all users
export const getUsers = async (req: Request, res: Response):Promise<void> => {
    try {
        const doctors = await UserDetails.findAll();
         res.json(doctors);
         return
    } catch (error:any) {
        console.error('Error fetching doctors:', error);
         res.status(httpStatusCodes.INTERNAL_SERVER_ERROR).json({ message: 'Server error', error: error.message });
         return
    }
};

// Adding a new user
export const addUser = async (req: Request, res: Response): Promise<void> => {
    try {
        const { firstName, lastName, email, password, doctor_type} = req.body;
        console.log(req.body)
        if (!firstName || !lastName || !email || !password || !doctor_type) {
            res.status(httpStatusCodes.BAD_REQUEST).json({ message: 'All fields are required.' });
            return;
        }

        const existingUser = await UserDetails.findOne({ where: { email } });
        if (existingUser) {
            res.status(httpStatusCodes.CONFLICT).json({ message: 'Email already exists' });
            return;
        }

        const hashedPassword = await bcrypt.hash(password, 10);

        const user = await UserDetails.create({
            firstName,
            lastName,
            email,
            password: hashedPassword,
            doctor_type, 
        });
        // await sendWelcomeEmail(user.email, user.firstName,autogeneratedPassword);
        res.status(httpStatusCodes.CREATED).json({ message: 'User created successfully', user });
    } catch (error: any) {
        console.error('Error creating user:', error);
        res.status(httpStatusCodes.INTERNAL_SERVER_ERROR).json({ message: 'Server error', error: error.message });
    }
};

// Getting the details of the specific user
export const getUserById = async (req: Request, res: Response): Promise<void> => {
    const userId = req.params.userId;

    try {
        const user = await UserDetails.findByPk(userId, {
            include: [
                {
                    model: UserAddresses,
                    as: 'addresses'
                }
            ]
        });

        if (!user) {
            res.status(404).json({ message: "User not found" });
            return;
        }

        res.status(200).json({
            message: "User retrieved successfully",
            data: user
        });
    } catch (error:any) {
        console.error("Error fetching user details:", error);
        res.status(500).json({
            message: "An error occurred while retrieving user details",
            error: error.message
        });
    }
};


// Update user datails
export const updateUser = async (req: Request, res: Response): Promise<void> => {
    const userId = req.params.userId;

    try {
        const user = await UserDetails.findByPk(userId);
        if (!user) {
            res.status(404).json({ message: "User not found" });
            return;
        }

        // When profile image is available
        // if (req.files && (req.files as { [fieldname: string]: Express.Multer.File[] })['profileImg']) {
        //     const profileImgPath = (req.files as { [fieldname: string]: Express.Multer.File[] })['profileImg'][0].path;
        //     req.body.profileImg = profileImgPath;
        // }

        await user.update(req.body);

        res.status(200).json({
            message: "User updated successfully",
            data: user
        });
    } catch (error: any) {
        console.error("Error updating user:", error);
        res.status(500).json({
            message: "An error occurred while updating the user",
            error: error.message
        });
    }
};

// Update password
export const updatePassword = async (req: Request, res: Response): Promise<void> => {
    const userId = req.params.userId;
    const { currentPassword, newPassword } = req.body;

    try {
        const user = await UserDetails.findByPk(userId);
        if (!user) {
            res.status(404).json({ message: "User not found" });
            return;
        }

        const isPasswordValid = await bcrypt.compare(currentPassword, user.password);
        if (!isPasswordValid) {
            res.status(400).json({ message: "Current password is incorrect" });
            return;
        }

        const hashedPassword = await bcrypt.hash(newPassword, 10);

        await user.update({ password: hashedPassword });

        res.status(200).json({ message: "Password updated successfully" });
    } catch (error:any) {
        console.error("Error updating password:", error);
        res.status(500).json({
            message: "An error occurred while updating the password",
            error: error.message,
        });
    }
};

// Adding or Updating addresses of a user
export const addOrUpdateUserAddress = async (req: Request, res: Response): Promise<void> => {
    const userId = req.params.userId;
    const addressId = req.params.addressId;
    const {
        address_title,
        office_phone_number,
        fax_number,
        street,
        city,
        state,
        country,
        zip_code
    } = req.body;

    try {
        const user = await UserDetails.findByPk(userId);
        if (!user) {
            res.status(404).json({ message: "User not found" });
            return;
        }

        let address;
        if (addressId) {
            address = await UserAddresses.findOne({
                where: { id: addressId, doctor_id: userId }
            });

            if (address) {
                await address.update({
                    address_title,
                    office_phone_number,
                    fax_number,
                    street,
                    city,
                    state,
                    country,
                    zip_code
                });
                res.status(200).json({
                    message: "Address updated successfully",
                    data: address
                });
                return;
            } else {
                res.status(404).json({ message: "Address not found" });
                return;
            }
        } else {
            address = await UserAddresses.create({
                doctor_id: userId,
                address_title,
                office_phone_number,
                fax_number,
                street,
                city,
                state,
                country,
                zip_code
            });

            res.status(201).json({
                message: "Address added successfully",
                data: address
            });
        }
    } catch (error:any) {
        console.error("Error adding/updating user address:", error);
        res.status(500).json({
            message: "An error occurred while adding/updating the address",
            error: error.message
        });
    }
};

// Deleting address of a user
export const deleteUserAddress = async (req: Request, res: Response): Promise<void> => {
    const userId = req.params.userId;
    const addressId = req.params.addressId;

    try {
        const address = await UserAddresses.findOne({
            where: {
                id: addressId,
                doctor_id: userId,
            },
        });

        if (!address) {
            res.status(404).json({ message: "Address not found or does not belong to this user" });
            return;
        }

        await address.destroy();

        res.status(200).json({ message: "Address deleted successfully" });
    } catch (error:any) {
        console.error("Error deleting user address:", error);
        res.status(500).json({
            message: "An error occurred while deleting the address",
            error: error.message,
        });
    }
};


// -----------------------------------------------------------------------------

export const userDetails = async (req: Request, res: Response): Promise<void> => {
    // const token = req.headers.authorization?.split(' ')[1];
    //     if (!token) {
    //          res.status(httpStatusCodes.UN_AUTHORIZED).json({ message: 'No token provided' });
    //          return
    //     }

    //     const decoded: any = jwt.verify(token, "secret_keu");
    //     const userId = decoded.id;
    // const userId = parseInt(req.params.userId, 10);
    const userId = req.params.userId;

    try {
        const doctor= await UserDetails.findOne({
            where: { id: userId, role: 1 }, 
            include: [{
                model: UserDetails,
                as: 'Agency',
                attributes: ['id', 'firstName', 'lastName','email','profileImg','contact','gender', 'isApproved'],
            }]
        });

        if (doctor) {
            res.json(doctor);
            return;
        }
        const agency = await UserDetails.findOne({
            where: { id: userId, role: 2 }, 
            attributes: ['id', 'firstName', 'lastName','email','profileImg','gender'],
            include: [{
                model: UserDetails,
                as: 'JobSeekers', 
                where: { role: 1 },
                attributes: ['id', 'firstName', 'lastName','email','contact','resume','profileImg','gender','isApproved'],
                required: false, 
            }]
        });

        if (agency) {
            res.json(agency);
            return;
        }

        res.status(httpStatusCodes.NOT_FOUND).json({ message: 'User not found' });
        return;

    } catch (error: any) {
        console.error('Error fetching user details:', error);
        res.status(httpStatusCodes.INTERNAL_SERVER_ERROR).json({ message: 'Server error', error: error.message });
        return;
    }
};



export const loginUser = async (req:Request, res:Response):Promise<void> => {
    try {
        const { email, password } = req.body;
        const user = await UserDetails.findOne({ where: { email } });
        if (!user) {
            res.status(httpStatusCodes.NOT_FOUND).json({ message: 'User not found' });
            return;
        }
        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) {
            res.status(httpStatusCodes.UN_AUTHORIZED).json({ message: 'Invalid credentials' });
            return;
        }
        const token = jwt.sign({ id: user.id }, "secret_keu");
        res.status(httpStatusCodes.OK).json({ message: 'Login successful', token, userId: user.id });
    } catch (err: any) {
        res.status(httpStatusCodes.INTERNAL_SERVER_ERROR).json({ message: err.message });
    }
};

